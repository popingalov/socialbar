/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { url } from 'inspector';
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const staticUrl = [
  'ingredients',
  'my-ingredient-list',
  'cocktails',
  'glasses',
  'users/me',
  'shoping-list',
  'categories',
  // 'favorite',
];
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }: any) => {
    const test = staticUrl.includes(url.href.split(/\/api\//).at(-1) || '');
    console.log(test, url.href);

    return test;
  },
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: 'myTest',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// self.addEventListener('fetch', function (event) {
//   const urlController = event.request.url.split(/\/api\//).at(-1) || '';
//   if (!staticUrl.includes(urlController)) {
//     event.respondWith(fetch(event.request).then(res => res));
//     return;
//   }
//   event.respondWith(fromCache(event.request, urlController, event));
//   // `waitUntil()` нужен, чтобы предотвратить прекращение работы worker'a до того как кэш обновиться.
//   event.waitUntil(update(event.request, urlController, event));
// });

// function fromCache(request: any, url: any, event: any) {
//   console.log('requestrrrrr', request);

//   return caches.open('CACHE').then(cache =>
//     cache.match(url).then((res: any) => {
//       if (res) {
//         return res;
//       }
//       return update(request, url, event);
//     }),
//   );
// }

// async function update(request: any, url: any, event: any) {
//   return caches.open('CACHE').then(cache =>
//     fetch(request).then(async response => {
//       console.log(response);
//       console.log(await response.formData());

//       event.respondWith(await response);

//       return await cache.put(url, response);
//     }),
//   );
// }
