/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

// import { url } from 'inspector';

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
//
import checkUrl from './serviceWorker/helpers/checkUrl';

import controller from 'serviceWorker/controller';
import { callbackObj } from 'serviceWorker/staticObjects/callbackObject';
import addToCache from 'serviceWorker/helpers/addToCache';
import respGenerator from 'serviceWorker/helpers/responseGenerator';
import takeCacheJson from 'serviceWorker/helpers/takeCacheJson';
import { CACHES_NAME } from 'serviceWorker/staticObjects/baseData';

//
declare const self: ServiceWorkerGlobalScope;
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'),
);
const internetSpeed = { speed: 100 };
if ('connection' in navigator) {
  const connection: any = navigator.connection;
  connection.addEventListener('change', handleConnectionChange);

  function handleConnectionChange() {
    callbackObj.internetSpeed += connection.rtt;
    // internetSpeed.speed += connection.rtt;
    console.log(callbackObj.internetSpeed);
  }
}

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

self.addEventListener('activate', () => {
  console.log('я працюю 1 раз під час оновлення білда');
});

self.addEventListener('fetch', async (event: FetchEvent): Promise<any> => {
  const req = event.request;

  const { test, url, id, baseUrl } = checkUrl(req.url);
  const online = navigator.onLine && internetSpeed.speed < 1200;
  if (test) {
    if (req.method !== 'GET' && !online) {
      tryCaches(req.clone());
      // const result = await takeCacheJson('/my/test');
      // console.log(result);
    }

    event.respondWith(cacheControl(req.clone(), url, id, baseUrl, online));
    if (online) {
      console.log('має працювати');
      // testTakeCache();
      // callbackObj.functionOfline();
      fetch(req);
      tryDoFetch();
    }
    event.waitUntil(continuationWork());
  }
});

async function tryCaches(req: Request) {
  const result: any = {};
  result.url = req.url;
  result.method = req.method;
  result.headers = { authorization: req.headers.get('authorization') };
  result.mode = req.mode;
  const jsonBody = await req.json();
  result.body = jsonBody;
  console.log(jsonBody);
  console.log(result);

  const resResult = respGenerator(result);

  addToCache(resResult, '/my/test33');
}
async function tryDoFetch() {
  const res = await takeCacheJson('/my/test33');
  if (res) {
    console.log(res);
    const req = new Request(res.url, {
      method: res.method,
      body: JSON.stringify(res.body),
      headers: res.headers,
      mode: res.mode,
    });
    const result = await fetch(req);
    console.log(result);
    const result2 = result.json();
    console.log(result2);

    (await caches.open(CACHES_NAME)).delete('/my/test33');
  }
}
async function continuationWork() {
  // tryDoFetch();
  const { nameFunc, trigger, ingredient, method } = callbackObj;
  if (trigger) {
    await callbackObj[nameFunc](ingredient, method);
    callbackObj.trigger = false;
    callbackObj.ingredient = null;
  }
}
async function cacheControl(
  req: Request,
  url: string,
  id: any,
  baseUrl: any,
  online: boolean,
) {
  const cached = await caches.match(url);
  const { method } = req;
  if (cached && method === 'GET') {
    return cached;
  }
  return controller(req, url, id, baseUrl, online);
}
